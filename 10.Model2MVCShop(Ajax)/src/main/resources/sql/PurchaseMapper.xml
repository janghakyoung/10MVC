<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="PurchaseMapper">
 	
 	
	<resultMap id="purchaseSelectMap" 	type="purchase">
		<result property="tranNo" 			column="tran_no" 			jdbcType="NUMERIC"/>
		<result property="purchaseProd"		column="prod_no" 			jdbcType="NUMERIC" />
		<result property="buyer" 			column="buyer_id" 			jdbcType="VARCHAR" />
		<result property="paymentOption"	column="payment_option"		jdbcType="CHAR" />
		<result property="receiverName" 	column="receiver_name" 		jdbcType="VARCHAR" />
		<result property="receiverPhone" 	column="receiver_phone" 	jdbcType="VARCHAR" />
		<result property="divyAddr" 		column="demailaddr" 		jdbcType="VARCHAR" />
		<result property="divyRequest" 		column="dlvy_request" 		jdbcType="VARCHAR" />
		<result property="tranCode" 		column="tran_status_code"	jdbcType="CHAR" />
		<result property="orderDate" 		column="order_data" 		jdbcType="DATE" />
		<result property="divyDate" 		column="dlvy_date" 			jdbcType="DATE" />
	</resultMap>	
	
	<!-- SQL : INSERT -->
	<insert 	id="insertPurchase"		parameterType="purchase" >
	 	INSERT
		INTO transaction ( tran_no , prod_no , buyer_id , payment_option , receiver_name, 
					receiver_phone, demailaddr, dlvy_request, tran_status_code, 
					order_data, dlvy_date) 
		VALUES	 (	seq_transaction_tran_no.nextval, #{purchaseProd:NUMERIC}, #{buyer:VARCHAR}, 
					#{paymentOption:CHAR}, #{receiverName:VARCHAR}, #{receiverPhone:VARCHAR}, 
					#{divyAddr:VARCHAR}, #{divyRequest:VARCHAR}, #{tranCode:CHAR},
					#{orderDate:DATE}, #{divyDate:DATE} )
	 </insert>
	 
	 <!-- SQL : SELECT ONE -->
	 <select 	id="findPurchase"	parameterType="int"	resultMap="purchaseSelectMap" >
		SELECT
		* 		
		FROM transaction 
		WHERE tran_no = #{value}
	 </select>
	 
	 <!-- SQL : UPDATE -->
	 <update	id="updatePurchase"	parameterType="purchase" >
	   	UPDATE transaction
	   	<set>
	   		payment_option 		= #{paymentOption} ,
	   		receiver_name 		= #{receiverName} ,
	   		receiver_phone 		= #{receiverPhone} ,
	   		demailaddr 			= #{divyAddr} ,
	   		dlvy_request 		= #{divyRequest} ,
	   		dlvy_date 			= #{divyDate} 
	   	</set>
	   	WHERE tran_no = #{tranNo}
	 </update>

	<!-- SQL : updateTranCode -->
	 <update	id="updateTranCode"	parameterType="purchase" >
	   	UPDATE transaction
	   	<set>
	   		tran_status_code 	= #{tranCode} 
	   	</set>
	   	WHERE tran_no = #{tranNo}
	 </update>
	 
	<!-- SQL : SELECT LIST -->
	<select  id="getPurchaseList"  parameterType="search"	resultMap="purchaseSelectMap">
	  	SELECT *
	  	FROM transaction
	  	WHERE buyer_id= #{userId}
		ORDER BY tran_no
	 </select>
	 	<!--  위 두번째 subQuery 의  
	 			WHERE ROWNUM &lt;= #{endRowNum} ) 는
	 			WHERE ROWNUM <= #{endRowNum} ) 의미이며..
	 			< 는 keyword 로 &lt; 를	사용.
	 			
	 			<![CDATA[  ~~~  ]]> 를 이용하여 아래와 같이 사용  할 수 있다.
	 			CDATA ==> Character Data 의 의미 Java 에서 \n 같은 특수문자 처리  

				WHERE ROWNUM <![CDATA[ <=]]> #{endRowNum} )
		-->
	
	<!-- SQL : SELECT ROW Count -->	 
	 <select  id="getTotalCount"  parameterType="search"	 resultType="int">
	  	SELECT COUNT(*)
	  	FROM(	SELECT * FROM transaction
						<if test="searchCondition != null">
							<where>
								<if test="searchCondition == 0 and searchKeyword !='' ">
						 			prod_no = #{searchKeyword}
								</if>
								<if test="searchCondition == 1 and searchKeyword !='' ">
						 			prod_name = #{searchKeyword}
								</if>
								<if test="searchCondition == 2 and searchKeyword !='' ">
						 			price = #{searchKeyword}
								</if>
							</where>
						</if> ) countTable						
	 </select>
	 
</mapper>